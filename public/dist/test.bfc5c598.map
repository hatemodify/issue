{"version":3,"sources":["js/blockchain.js","js/test.js"],"names":["Blockchain","chain","newTransactions","nonce","previousBlockHash","hash","newBlock","index","length","timeStamp","Date","now","transaction","push","amount","sender","recipient","newTransaction","getLastBlock","bitcoin","a","b","createNewBlock","createNewTransaction","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAMA;;;AACJ,wBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACD;;;;mCACcC,OAAOC,mBAAmBC,MAAM;AAC7C,UAAMC,QAAQ,GAAG;AACfC,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,MAAX,GAAoB,CADZ;AAEfC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAFI;AAGfC,QAAAA,WAAW,EAAE,KAAKV,eAHH;AAIfC,QAAAA,KAAK,EAALA,KAJe;AAKfE,QAAAA,IAAI,EAAJA,IALe;AAMfD,QAAAA,iBAAiB,EAAjBA;AANe,OAAjB;AAQA,WAAKF,eAAL,GAAuB,EAAvB;AACA,WAAKD,KAAL,CAAWY,IAAX,CAAgBP,QAAhB;AACA,aAAOA,QAAP;AACD;;;mCACc;AACb,aAAO,KAAKL,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAP;AACD;;;yCACoBM,QAAQC,QAAQC,WAAU;AAC7C,UAAMC,cAAc,GAAG;AACrBH,QAAAA,MAAM,EAANA,MADqB;AAErBC,QAAAA,MAAM,EAANA,MAFqB;AAGrBC,QAAAA,SAAS,EAATA;AAHqB,OAAvB;AAKA,WAAKd,eAAL,CAAqBW,IAArB,CAA0BI,cAA1B;AACA,aAAO,KAAKC,YAAL,GAAoB,OAApB,IAA6B,CAApC;AACD;;;;;;eAIYlB;;;;;ACjCf;;;;AACA,IAAMmB,OAAO,GAAG,IAAInB,mBAAJ,EAAhB;AAIE,IAAIoB,CAAC,GAAG,CAAR;AAAA,IAAYC,CAAC,GAAE,CAAf;;AACA,OAAMD,CAAC,GAAG,EAAV,EAAcA,CAAC,EAAf,EAAkB;AAChBD,EAAAA,OAAO,CAACG,cAAR,CAAuBD,CAAC,GAACD,CAAzB,aAA+BA,CAAC,GAAC,CAAjC,cAAsCA,CAAC,GAAC,CAAxC,cAAgDC,CAAC,GAAC,CAAlD,cAAuDD,CAAC,GAAC,CAAzD;AACD;;AACHD,OAAO,CAACI,oBAAR,CAA6B,GAA7B,EAAiC,KAAjC,EAAwC,QAAxC;AAGAC,OAAO,CAACC,GAAR,CAAYN,OAAO,CAAClB,KAAR,CAAc,CAAd,CAAZ","file":"test.bfc5c598.map","sourceRoot":"..","sourcesContent":["class Blockchain {\n  constructor() {\n    this.chain = [];\n    this.newTransactions = [];\n  }\n  createNewBlock(nonce, previousBlockHash, hash) {\n    const newBlock = {\n      index: this.chain.length + 1,\n      timeStamp: Date.now(),\n      transaction: this.newTransactions,\n      nonce,\n      hash,\n      previousBlockHash\n    };\n    this.newTransactions = [];\n    this.chain.push(newBlock);\n    return newBlock;\n  }\n   getLastBlock(){\n    return this.chain[this.chain.length - 1];\n  }\n  createNewTransaction(amount, sender, recipient){\n    const newTransaction = {\n      amount,\n      sender,\n      recipient\n    }\n    this.newTransactions.push(newTransaction);\n    return this.getLastBlock()['index']+1\n  }  \n}\n\n\nexport default Blockchain;","import Blockchain from './blockchain';\nconst bitcoin = new Blockchain();\n\n\n\n  let a = 0 , b= 0;\n  for(; a < 20; a++){\n    bitcoin.createNewBlock(b+a,`a${a+2}b${a+1}`,`a${b+1}b${a+2}`);\n  }\nbitcoin.createNewTransaction(100,'멍청이', 'ㅁㄴㅇㅁㄴㅇ')\n\n\nconsole.log(bitcoin.chain[1])"]}