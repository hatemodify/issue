{"version":3,"sources":["js/MTLLoader.js"],"names":["THREE","MTLLoader","manager","undefined","DefaultLoadingManager","prototype","constructor","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setTexturePath","texturePath","setBaseUrl","console","warn","setCrossOrigin","value","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","Color","fromArray","specular","shininess","opacity","transparent","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader"],"mappings":"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","file":"MTLLoader.c4c67c4e.map","sourceRoot":"..","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MTLLoader.prototype = {\n\n\tconstructor: THREE.MTLLoader,\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setTexturePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setPath and/or setTexturePath explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * Set base path for resolving references.\n\t * If set this path will be prepended to each loaded and found reference.\n\t *\n\t * @see setTexturePath\n\t * @param {String} path\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetPath: function ( path ) {\n\n\t\tthis.path = path;\n\n\t},\n\n\t/**\n\t * Set base path for resolving texture references.\n\t * If set this path will be prepended found texture reference.\n\t * If not set and setPath is, it will be used as texture base path.\n\t *\n\t * @see setPath\n\t * @param {String} path\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.setTexturePath( 'assets/textures/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetTexturePath: function ( path ) {\n\n\t\tthis.texturePath = path;\n\n\t},\n\n\tsetBaseUrl: function ( path ) {\n\n\t\tconsole.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );\n\n\t\tthis.setTexturePath( path );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setTexturePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setPath and/or setTexturePath explicitly prior to parse.\n\t */\n\tparse: function ( text ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else if ( info ) {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: THREE.MTLLoader.MaterialCreator,\n\n\tcrossOrigin: 'Anonymous',\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function ( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function ( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function ( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function () {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar scope = this;\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tfunction resolveURL( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\n\n\t\t\treturn baseUrl + url;\n\n\t\t}\n\n\t\tfunction setMapForType( mapType, value ) {\n\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\n\n\t\t\tvar texParams = scope.getTextureParams( value, params );\n\t\t\tvar map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\n\n\t\t\tmap.repeat.copy( texParams.scale );\n\t\t\tmap.offset.copy( texParams.offset );\n\n\t\t\tmap.wrapS = scope.wrap;\n\t\t\tmap.wrapT = scope.wrap;\n\n\t\t\tparams[ mapType ] = map;\n\n\t\t}\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\t\t\tvar n;\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tsetMapForType( \"map\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tsetMapForType( \"specularMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'norm':\n\n\t\t\t\t\tsetMapForType( \"normalMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tsetMapForType( \"bumpMap\", value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\t\t\t\t\tn = parseFloat(value);\n\n\t\t\t\t\tif ( n < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tr':\n\t\t\t\t\tn = parseFloat(value);\n\n\t\t\t\t\tif ( n > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - n;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tgetTextureParams: function ( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\toffset: new THREE.Vector2( 0, 0 )\n\n\t\t };\n\n\t\tvar items = value.split( /\\s+/ );\n\t\tvar pos;\n\n\t\tpos = items.indexOf( '-bm' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf( '-s' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf( '-o' );\n\n\t\tif ( pos >= 0 ) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join( ' ' ).trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar loader = THREE.Loader.Handlers.get( url );\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};"]}